@using MenShopBlazor.DTOs.Account
@using MenShopBlazor.DTOs.AddressDTO
@using MenShopBlazor.Services.Admin
@using MenShopBlazor.Services.UploadImage
@using MenShopBlazor.Services.Branch
@using MenShopBlazor.DTOs.Branch
@using MenShopBlazor.Services.Address
@inject IAddressService AddressService
@inject IBranchService BranchService
@inject IAdminService AdminService
@inject IUpImg ImageService
@inject ISnackbar Snackbar
@using static MenShopBlazor.DTOs.AddressDTO.AddressDTO;

<MudDialog MaxWidth="MaxWidth.Medium">
    <DialogContent>
        <MudText Typo="Typo.h6">Cập nhật thông tin nhân viên</MudText>

        <div class="d-flex gap-2 align-items-start">
            @if (!string.IsNullOrEmpty(_model.Avatar))
            {
                <MudPaper Class="pa-2 d-flex flex-column align-items-center">
                    <MudText Typo="Typo.subtitle2">Ảnh hiện tại</MudText>
                    <MudImage Src="@_model.Avatar"
                              Alt="Ảnh đại diện"
                              Elevation="25"
                              Class="rounded-lg"
                              Width="150" />
                </MudPaper>
            }

            @if (previewImage is not null)
            {
                <MudPaper Class="pa-2 d-flex flex-column align-items-center">
                    <MudText Typo="Typo.subtitle2">Ảnh mới</MudText>
                    <MudImage Src="@previewImage.PreviewUrl"
                              Alt="Ảnh mới"
                              Elevation="25"
                              Class="rounded-lg"
                              Width="150" />
                </MudPaper>
            }
        </div>

        <MudFileUpload T="IBrowserFile"
                       FilesChanged="OnFileSelected"
                       MaxFiles="1"
                       MaxFileSize="2097152"
                       Accept="image/*">
            <ActivatorContent>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Secondary"
                           StartIcon="@Icons.Material.Filled.Image">
                    Chọn ảnh mới
                </MudButton>
            </ActivatorContent>
        </MudFileUpload>

        <MudDivider Class="my-2" />

        <MudForm @ref="form" Model="_model" Validated="OnValidated">
            <MudTextField @bind-Value="_model.FullName"
                          Label="Họ và tên"
                          Margin="Margin.Dense"
                          Variant="Variant.Outlined"
                          Required="true" />

            <MudTextField @bind-Value="_model.PhoneNumber"
                          Label="Số điện thoại"
                          Margin="Margin.Dense"
                          Variant="Variant.Outlined"
                          Required="true" />

            <MudDatePicker @bind-Date="_model.BirthDate"
                           Label="Ngày sinh"
                           Required="true"
                           Variant="Variant.Outlined"
                           MaxDate="@DateTime.Today"
                           DateFormat="dd/MM/yyyy" />
            <MudTextField @bind-Value="_model.Email"
                          Label="Email"
                          Margin="Margin.Dense"
                          Variant="Variant.Outlined"
                          Required="true" />
            <MudRadioGroup T="bool?" @bind-Value="_model.Gender">
                <MudRadio T="bool?" Value="true" Label="Nam" />
                <MudRadio T="bool?" Value="false" Label="Nữ" />
            </MudRadioGroup>

            @if (_model.WorkArea != null)
            {
            <MudSelect T="int"
                       Label="Tỉnh/Thành phố"
                       Required="true"
                       RequiredError="Vui lòng chọn Tỉnh/Thành phố"
                       Margin="Margin.Dense"
                       Variant="Variant.Outlined"
                       Value="_model.WorkArea.ProvinceId ?? 0"
                       ValueChanged="HandleProvinceChange"
                       Disabled="Districts.Count == 0">
                @foreach (var p in Provinces)
                {
                    <MudSelectItem Value="@p.Code">@p.Name</MudSelectItem>
                }
            </MudSelect>


            <MudSelect T="int"
                       Label="Quận/Huyện"
                       Margin="Margin.Dense"
                       Variant="Variant.Outlined"
                       Value="_model.WorkArea.DistrictId ?? 0"
                       ValueChanged="HandleDistrictChange"
                       Required="true"
                       Disabled="Districts.Count == 0">
                @foreach (var d in Districts)
                {
                    <MudSelectItem Value="@d.Code">@d.Name</MudSelectItem>
                }
            </MudSelect>

            <MudSelect T="int"
                       Label="Phường/Xã"
                       Margin="Margin.Dense"
                       Variant="Variant.Outlined"
                       Value="_model.WorkArea.WardId ?? 0"
                       ValueChanged="HandleWardChange"
                       Required="true"
                       Disabled="Wards.Count == 0">
                @foreach (var w in Wards)
                {
                    <MudSelectItem Value="@w.Code">@w.Name</MudSelectItem>
                }
            </MudSelect>
            }
            @if (Role == "BranchManager")
            {
                <MudSelect T="int" Variant="Variant.Outlined" Label="Chi nhánh" @bind-Value="_model.BranchId" Required="true" Disabled=true>
                    @if (branches != null)
                    {
                        @foreach (var branch in branches)
                        {
                            <MudSelectItem Value="@branch.BranchId">@branch.Name</MudSelectItem>
                        }
                    }
                </MudSelect>
            } else
            {
                <MudSelect T="int" Variant="Variant.Outlined" Label="Chi nhánh" @bind-Value="_model.BranchId" Required="true">
                    @if (branches != null)
                    {
                        @foreach (var branch in branches)
                        {
                            <MudSelectItem Value="@branch.BranchId">@branch.Name</MudSelectItem>
                        }
                    }
                </MudSelect>
            }


            <MudTextField @bind-Value="_model.NewPassword"
                          Label="Mật khẩu mới"
                          InputType="InputType.Password"
                          Margin="Margin.Dense"
                          Variant="Variant.Outlined" />
        </MudForm>
    </DialogContent>

    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="UpdateEmployeeAsync">Cập nhật</MudButton>
        <MudButton OnClick="Cancel">Hủy</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public string UserId { get; set; }
    [Parameter]
    public string Role { get; set; }
    [Parameter]
    public EmployeeUpdateDTO EmployeeData { get; set; }

    private MudForm form;
    private EmployeeUpdateDTO _model = new();

    private PreviewImage previewImage;
    private List<ProvinceDTO> Provinces = new();
    private List<DistrictDTO> Districts = new();
    private List<WardDTO> Wards = new();

    private IEnumerable<BranchViewModel> branches = new List<BranchViewModel>();
    public class PreviewImage
    {
        public IBrowserFile File { get; set; }
        public string PreviewUrl { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        var allbranch = await BranchService.GetAllBranchesAsync();
        branches = allbranch.Data ?? new List<BranchViewModel>();

        Provinces = await AddressService.GetProvincesAsync();
        _model = new EmployeeUpdateDTO
        {
            FullName = EmployeeData.FullName,
            PhoneNumber = EmployeeData.PhoneNumber,
            Email = EmployeeData.Email,
            BirthDate = EmployeeData.BirthDate,
            Gender = EmployeeData.Gender,
            Avatar = EmployeeData.Avatar,
            WorkArea = EmployeeData.WorkArea ?? new AddressInfo(),
            BranchId = EmployeeData.BranchId
        };


        if (_model.WorkArea?.ProvinceId != null)
        {
            Districts = await AddressService.GetDistrictsByProvinceAsync(_model.WorkArea.ProvinceId.Value);
        }

        if (_model.WorkArea?.DistrictId != null)
        {
            Wards = await AddressService.GetWardsByDistrictAsync(_model.WorkArea.DistrictId.Value);
        }
    }


    private async Task OnFileSelected(IBrowserFile file)
    {
        previewImage = null;
        var previewUrl = await GetPreviewUrl(file);
        previewImage = new PreviewImage
            {
                File = file,
                PreviewUrl = previewUrl
            };
        StateHasChanged();
    }

    private async Task<string> GetPreviewUrl(IBrowserFile file)
    {
        using var stream = file.OpenReadStream(2 * 1024 * 1024);
        var buffer = new byte[file.Size];
        await stream.ReadAsync(buffer);
        return $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task UpdateEmployeeAsync()
    {
        await form.Validate();
        if (!form.IsValid)
        {
            Snackbar.Add("Vui lòng kiểm tra các trường bắt buộc.", Severity.Warning);
            return;
        }

        // Nếu chọn ảnh mới thì upload
        if (previewImage != null)
        {
            using var stream = previewImage.File.OpenReadStream(2 * 1024 * 1024);
            var content = new MultipartFormDataContent();
            content.Add(new StreamContent(stream), "file", previewImage.File.Name);

            var uploadedUrl = await ImageService.UploadImage(content);
            if (!string.IsNullOrEmpty(uploadedUrl))
            {
                _model.Avatar = uploadedUrl;
            }
            else
            {
                Snackbar.Add("Tải ảnh thất bại.", Severity.Error);
                return;
            }
        }

        var response = await AdminService.UpdateEmployeeAsync(UserId, _model);
        if (response.IsSuccess)
        {
            Snackbar.Add(response.Message, Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
        {
            if (response.Errors != null && response.Errors.Any())
            {
                foreach (var err in response.Errors)
                    Snackbar.Add(err, Severity.Error);
            }
            else
            {
                Snackbar.Add(response.Message, Severity.Error);
            }
        }
    }

    private void OnValidated()
    {
        StateHasChanged();
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task HandleProvinceChange(int selectedId)
    {
        var selected = Provinces.FirstOrDefault(p => p.Code == selectedId);
        if (selected != null)
        {
            _model.WorkArea ??= new AddressInfo();
            _model.WorkArea.ProvinceName = selected.Name;
            _model.WorkArea.ProvinceId = selected.Code;

            Districts = await AddressService.GetDistrictsByProvinceAsync(selected.Code);
            Wards.Clear();

            _model.WorkArea.DistrictId = null;
            _model.WorkArea.DistrictName = null;
            _model.WorkArea.WardId = null;
            _model.WorkArea.WardName = null;

            StateHasChanged();
        }
    }
    private async Task HandleDistrictChange(int selectedId)
    {
        var selected = Districts.FirstOrDefault(d => d.Code == selectedId);
        if (selected != null)
        {
            _model.WorkArea ??= new AddressInfo();
            _model.WorkArea.DistrictName = selected.Name;
            _model.WorkArea.DistrictId = selected.Code;

            Wards = await AddressService.GetWardsByDistrictAsync(selected.Code);

            _model.WorkArea.WardId = null;
            _model.WorkArea.WardName = null;

            StateHasChanged();
        }
    }

    private Task HandleWardChange(int selectedId)
    {
        var selected = Wards.FirstOrDefault(w => w.Code == selectedId);
        if (selected != null)
        {
            _model.WorkArea ??= new AddressInfo();
            _model.WorkArea.WardId = selected.Code;
            _model.WorkArea.WardName = selected.Name;
        }

        return Task.CompletedTask;
    }
}
