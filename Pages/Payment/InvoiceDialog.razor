@using MenShopBlazor.DTOs.Order
@using MenShopBlazor.DTOs.Product.ViewModel
@using MenShopBlazor.Services.Order
@using MenShopBlazor.Services.Token
@inject ITokenService TokenService
@inject IOrderService OrderService
@inject IJSRuntime JS
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;

<MudOverlay Visible="_loading" DarkBackground="true" Fixed="true" ZIndex="1300">
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
</MudOverlay>

    <MudDialog>
        <DialogContent>
            <div id="invoice">
                <MudContainer Class="px-8" MaxWidth="MaxWidth.False">
                    <MudDivider />
                    <MudGrid>
                        <MudItem xs="12">
                            <MudImage Src="imgs/logo-MS.png" Alt="Logo" Style="width: 140px" />
                        </MudItem>
                    @if (!_loading)
                    {
                        <MudItem xs="12" sm="6">
                            <MudText><b>Cửa hàng:</b> @(role == "Customer" ? "Online" : branchName)</MudText>
                            <MudText><b>Ngày:</b> @DateTime.Now</MudText>
                        </MudItem>

                        <MudItem xs="12" sm="6">
                            <MudText><b>Khách hàng:</b> @customerName</MudText>
                            @if (role != "Customer")
                            {
                                <MudText><b>Nhân viên thu ngân:</b> @employeeName</MudText>
                            }
                        </MudItem>

                        <MudItem xs="12">
                            @{
                                int stt = 1;
                            }
                            <MudTable Items="OrderDetail" Dense="true" Hover="true" Breakpoint="Breakpoint.Sm">
                                <HeaderContent>
                                    <MudTh>STT</MudTh>
                                    <MudTh>Tên SP</MudTh>
                                    <MudTh>SL</MudTh>
                                    <MudTh>Đơn giá</MudTh>
                                    <MudTh>Giá giảm</MudTh>
                                    <MudTh>Thành tiền</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd>@(stt++)</MudTd>
                                    <MudTd>@context.ProductName</MudTd>
                                    <MudTd>@context.Quantity</MudTd>
                                    <MudTd>@((context.SellPrice ?? 0).ToString("N0"))</MudTd>
                                    <MudTd Style="@($"color:{Colors.Red.Lighten1};")">@((context.DiscountedPrice ?? 0).ToString("N0"))</MudTd>
                                    <MudTd>@(((context.DiscountedPrice ?? 0) * (context.Quantity ?? 0)).ToString("N0"))</MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudItem>

                        <MudItem xs="12" sm="4" />
                        <MudItem xs="12" sm="8">
                            <MudGrid>
                                <MudItem xs="7">
                                    <MudText><b>Tổng tiền:</b></MudText>
                                    <MudText><b>Tiền khách trả:</b></MudText>
                                    <MudText><b>Còn lại:</b></MudText>
                                </MudItem>
                                <MudItem xs="5" Class="text-end">
                                    <MudText>@Amount.ToString("N0") ₫</MudText>
                                    <MudText>@CustomerPaid.ToString("N0") ₫</MudText>
                                    <MudText>@Change.ToString("N0") ₫</MudText>
                                </MudItem>
                            </MudGrid>
                        </MudItem>

                        <MudItem xs="12" Class="d-flex justify-content-center">
                            <MudText><b>Cảm ơn quý khách và hẹn gặp lại!</b></MudText>
                        </MudItem>
                        }
                    </MudGrid>
                </MudContainer>
            </div>
        </DialogContent>

        <DialogActions>
            <MudButton OnClick="Print">In</MudButton>
            <MudButton Color="Color.Secondary" OnClick="() => MudDialog.Cancel()">Đóng</MudButton>
        </DialogActions>
    </MudDialog>


@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }

    [Parameter] public string OrderId { get; set; }
    [Parameter] public string TransactionCode { get; set; }
    [Parameter] public decimal Amount { get; set; }
    [Parameter] public string OrderInfo { get; set; }
    [Parameter] public decimal CustomerPaid { get; set; }
    [Parameter] public decimal Change { get; set; }

    private List<OrderProductDetailViewModel>? OrderDetail;

    private decimal TotalOriginalPrice => OrderDetail?.Sum(x => (x.SellPrice ?? 0) * (x.Quantity ?? 0)) ?? 0;
    private decimal TotalDiscountedPrice => OrderDetail?.Sum(x => (x.DiscountedPrice ?? 0) * (x.Quantity ?? 0)) ?? 0;

    private OrderViewModel? Order;
    private string role;
    private string customerName;
    private string employeeName;
    private string branchName;
    private bool _loading = true;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _loading = true;

            var roleTask = TokenService.GetRoleAsync();
            var orderTask = OrderService.GetOrderByIdAsync(OrderId);
            var orderDetailTask = OrderService.GetOrderDetailAsync(OrderId);

            await Task.WhenAll(roleTask, orderDetailTask, orderTask);


            role = roleTask.Result;
            OrderDetail = orderDetailTask.Result;
            Order = orderTask.Result;

            if (Order != null)
            {
                customerName = Order.CustomerName;
                employeeName = Order.EmployeeName;
                branchName = Order.BranchName;
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"[InvoiceDialog] Error: {ex.Message}");
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }



    private async Task Print()
    {
        await JS.InvokeVoidAsync("exportInvoiceToPdf", "invoice", $"Invoice_{OrderId}.pdf");
        MudDialog.Close();
    }
}
